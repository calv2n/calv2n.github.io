[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The most recent copy of my resume can be found here.\nA portfolio of my Data Science projects can be found here.\nCalvin Carter is a passionate Data Scientist with extensive project experience using Python, R, and PostgreSQL. His current career goal is an internship in Data Science or Data Analytics while he completes his Masters degree in Statistics at UC Berkeley."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\nUniversity of California, Berkeley   \nMaster of Arts, Statistics with an emphasis in machine learning\nExpected December, 2025\n\n\nUniversity of California, Berkeley   \nBachelor of Arts, Data Science with an emphasis in Applied Mathematics and Modeling\nMay 2024\n\nOther: Certification in “Mastering Data Analysis in Excel”, Duke University"
  },
  {
    "objectID": "about.html#skills",
    "href": "about.html#skills",
    "title": "About",
    "section": "Skills",
    "text": "Skills\nProgramming Languages: Python, R, SQL, Java, C++.\nLibraries, Packages, and more: NumPy, Pandas, SciPy, scikit-learn, Tidyverse, R Packages, Quarto, MongoDB.\nOther Technical: MS Office, Data Visualization, Statistical Modeling, Machine Learning, Causal Inference, Git/GitHub.\nSoft Skills: Ability to Effectively Communicate, Decision Making, Adaptability, Critical Thinking, Curiosity, Attention to Detail, Problem Solving Skills, Focus, Leadership, Presentation, Ambition, Creativity, Collaboration, Teaching."
  },
  {
    "objectID": "about.html#work-experience",
    "href": "about.html#work-experience",
    "title": "About",
    "section": "Work Experience",
    "text": "Work Experience\n\nGraduate Student Instructor - Concepts in Computing with Data\nUC Berkeley Statistics Department\nAugust 2024 - Present\n\n\nDeliver engaging lab sections for a cohort of 76 students, covering foundational and advanced statistical computing concepts in R.\nGuide students in adopting best practices for data analysis and statistical computing, including effective use of R packages, reproducible research techniques, and data visualization principles.\n\n\nCo-Founder & Facilitator - Intro to Data Visualization DeCal Course\nUC Berkeley Statistics Department\nJune 2023 - July 2024\n\n\nWorked with Berkeley Statistics Professor to develop syllabus and 14 weeks of course content including lectures, labs, homework, and video tutorials.\nConducted surveys to adjust and improve course material throughout each semester. Saw an increase of over 300% in enrolled students between Fall and Spring semesters as a result of improvements.\n\n\n\nAcademic Tutor\nUC Berkeley Statistics Department\n\n\n\nConcepts in Computing with Data\nJanuary 2024 - May 2024\n\n\nEffectively communicated statistical computing concepts in a detailed and easily digestible manner during twice weekly office hours.\nContributed to understanding of statistical computing concepts in R and leadership.\n\n\nIntroduction to Probability and Statistics\nJanuary 2023 - May 2023\n\n\nThrived in a teamwork setting and Improved teaching skills.\nCreated walkthrough videos of problem sets and held weekly office hours.\n\n\n\n\nProjects\nA portfolio of my Data Science projects can be found here."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Project Portfolio",
    "section": "",
    "text": "January 1 - May 31\nhttps://www.github.com/gradebook-dev/\nDescription: Gradebook is an open-source R package and Web Application that provides a consistent interface for instructors to quickly and more accurately calculate course grades.\nThe Problem: Many instructors (especially at Berkeley) opt to use Gradescope for students to upload their submissions to course assignments, as it provides an industry leading interface to instructors and readers for grading. However, Gradescope lacks functionality of implimenting a course policy. An example of a course policy (Data 88S):\n\nAt first, this might seem like a simple problem to solve with some sort of code file (perhaps using Pandas & NumPy in Python or R). But we have seen with courses such as Statistics 20 that these course policies can get extraordinarily convoluted and error prone.\nThe current best solution for instructors to calculate final grades based on their course policy is to either of the following:\n\nParallel program two seperate code books and compare the scores against one another until they agree.\n\npros: very accurate\ncons: takes two programmers that fully understand the course policy & takes longer than single code book.\n\nCreate a single code book that can result in potential bugs that result in inaccurate scores.\n\npros: faster than parallel programming\ncons: error prone and still not a fast solution.\n\n\nThe Solution:\nGradebook: An interface that abstracts the code into human understandable steps.\n\nAn instructor (or reader) provides the web app with their course policy using the intuitive policy tab. Then, they can upload their course’s Gradescope CSV to see data visualizations, statistics, a final grade table, and more.\n\n\nDuring my time with the Gradebook team, I was responsible for designing and developing the “Dashboard” which displays graphics and statistics so the instructor can visually gauge their student’s project.\n\nApplying Data Visualization skills using Plotly.\nGit and GitHub (including branching, pull requests, working with github in a team setting).\nThe importance of Teamwork & Communication in Data Science.\nWeb development essentials (incl. HTML, CSS)"
  },
  {
    "objectID": "projects.html#gradebook",
    "href": "projects.html#gradebook",
    "title": "Project Portfolio",
    "section": "",
    "text": "January 1 - May 31\nhttps://www.github.com/gradebook-dev/\nDescription: Gradebook is an open-source R package and Web Application that provides a consistent interface for instructors to quickly and more accurately calculate course grades.\nThe Problem: Many instructors (especially at Berkeley) opt to use Gradescope for students to upload their submissions to course assignments, as it provides an industry leading interface to instructors and readers for grading. However, Gradescope lacks functionality of implimenting a course policy. An example of a course policy (Data 88S):\n\nAt first, this might seem like a simple problem to solve with some sort of code file (perhaps using Pandas & NumPy in Python or R). But we have seen with courses such as Statistics 20 that these course policies can get extraordinarily convoluted and error prone.\nThe current best solution for instructors to calculate final grades based on their course policy is to either of the following:\n\nParallel program two seperate code books and compare the scores against one another until they agree.\n\npros: very accurate\ncons: takes two programmers that fully understand the course policy & takes longer than single code book.\n\nCreate a single code book that can result in potential bugs that result in inaccurate scores.\n\npros: faster than parallel programming\ncons: error prone and still not a fast solution.\n\n\nThe Solution:\nGradebook: An interface that abstracts the code into human understandable steps.\n\nAn instructor (or reader) provides the web app with their course policy using the intuitive policy tab. Then, they can upload their course’s Gradescope CSV to see data visualizations, statistics, a final grade table, and more.\n\n\nDuring my time with the Gradebook team, I was responsible for designing and developing the “Dashboard” which displays graphics and statistics so the instructor can visually gauge their student’s project.\n\nApplying Data Visualization skills using Plotly.\nGit and GitHub (including branching, pull requests, working with github in a team setting).\nThe importance of Teamwork & Communication in Data Science.\nWeb development essentials (incl. HTML, CSS)"
  },
  {
    "objectID": "projects.html#email-spam-detection",
    "href": "projects.html#email-spam-detection",
    "title": "Project Portfolio",
    "section": "Email Spam Detection",
    "text": "Email Spam Detection\nNovember 2023, February 2024\nSource code available upon request.\n“All models are wrong, but some are useful” - George Box\nIn my time as an undergraduate at Berkeley, I’ve had a few projects address the famous problem of email spam detection. In my first attempt at creating an accurate solution, I created a logistic regression model.\n\nLogistic Regression\nTo find the best features for my model, I used exploritory data analysis techniques, including visualization with a heatmap of the feature correlations, bivariate data analysis with data visualization, and filling NA values in features with appropriate aggregations (mean, median, or 0 depending on skew of univariate distribution).\nI also used feature engineering to get some of the most effective features for my regression. Some of the best features I found were the following:\n\nEmail is a “forwarded” or “reply” *.\nLength of subject line in email.\nOverall “wordiness” of email *.\nProportion of capital letters in subject line *.\n\n* indicates featured engineering used.\n\nResulting ROC Curve:\n\nMy final test accuracy using this model was \\(\\approx\\) 87%.\n\n\nSupport Vector Machine (SVM)\nUsed k-fold cross validation to optimize C value in svm.SVC function found in the scikit-learn package in Python. Eventually landed on a test accuracy of 86% using the rbf kernel with a C value of 325.\n\n\nWhat I learned\n\nLogistic Regression\nscikit-learn"
  },
  {
    "objectID": "projects.html#diabetes-prediction",
    "href": "projects.html#diabetes-prediction",
    "title": "Project Portfolio",
    "section": "Diabetes Prediction",
    "text": "Diabetes Prediction"
  },
  {
    "objectID": "projects.html#gitlet",
    "href": "projects.html#gitlet",
    "title": "Project Portfolio",
    "section": "Gitlet",
    "text": "Gitlet\nJuly 2023\nSource code available upon request.\nSuccessfully implimented the following commands from the Git Version Control System:\n\ninit: Creates a new Gitlet version-control system in the current directory.\nadd: Adds a copy of the file as it currently exists to the staging area.\ncommit: Saves a snapshot of tracked files in the current commit and staging area so they can be restored at a later time, creating a new commit.\nrestore: Restore is used to revert files back to their previous versions. Depending on the arguments, there’s 2 different usages of restore:\n\njava gitlet.Main restore -- [file name]\njava gitlet.Main restore [commit id] -- [file name]\n\nlog: Starting at the current head commit, display information about each commit backwards along the commit tree until the initial commit, following the first parent commit links, ignoring any second parents found in merge commits.\n\n===\ncommit a0da1ea5a15ab613bf9961fd86f010cf74c7ee48\nDate: Thu Nov 9 20:00:05 2017 -0800\nA commit message.\n\n===\ncommit 3e8bf1d794ca2e9ef8a4007275acf3751c7170ff\nDate: Thu Nov 9 17:01:33 2017 -0800\nAnother commit message.\n\n===\ncommit e881c9575d180a215d1a636545b8fd9abfb1d2bb\nDate: Wed Dec 31 16:00:00 1969 -0800\ninitial commit\n\nglobal-log: Like log, except displays information about all commits ever made.\nrm: Unstage the file if it is currently staged for addition. If the file is tracked in the current commit, stage it for removal and remove the file from the working directory if the user has not already done so.\nfind: Prints out the ids of all commits that have the given commit message, one per line. If there are multiple such commits, it prints the ids out on separate lines.\nstatus: Displays what branches currently exist, and marks the current branch with a *. Also displays what files have been staged for addition or removal.\nbranch: Creates a new branch with the given name, and points it at the current head commit.\nswitch: Switches to the branch with the given name. Takes all files in the commit at the head of the given branch, and puts them in the working directory, overwriting the versions of the files that are already there if they exist. Also, at the end of this command, the given branch will now be considered the current branch (HEAD). Any files that are tracked in the current branch but are not present in the checked-out branch are deleted. The staging area is cleared, unless the checked-out branch is the current branch.\nrm-branch: Deletes the branch with the given name. This only means to delete the pointer associated with the branch; it does not mean to delete all commits that were created under the branch, or anything like that.\nreset: Restores all the files tracked by the given commit. Removes tracked files that are not present in that commit. Also moves the current branch’s head to that commit node.\n\n\nWhat I Learned\nThis was my first large project when I came to Berkeley as an undergraduate.\n\nJava for large scale projects\nDesigning and implimenting data structures to maximize efficiency.\nFundamentals of Git as a software from the ground up."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Calvin Carter",
    "section": "",
    "text": "Graduate Student Instructor at the UC Berkeley Statistics Department. Currently seeking internship opportunities in Data Science.\nMore about me here \nMy project portfolio here \n   /calvinmcarter        /calv2n         '{}@{}.edu'.format('calv2n', 'berkeley')"
  }
]